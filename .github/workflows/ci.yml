name: 🔧 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '18.x'
  CACHE_VERSION: 'v1'

jobs:
  # 🕵️ Code Quality Checks
  quality:
    name: 📝 Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: 📋 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: 📦 Install dependencies
      run: |
        npm ci
        npm ls --depth=0
    
    - name: 🔍 Lint code
      run: |
        npm run lint
        npm run lint:css
    
    - name: 🎨 Check formatting
      run: npm run format:check
    
    - name: 🔒 Type check
      run: npm run type-check
      
    - name: 📊 Analyze bundle
      run: npm run analyze

  # 🧪 Testing Suite
  test:
    name: 🧪 Tests
    runs-on: ubuntu-latest
    needs: quality
    
    strategy:
      matrix:
        node-version: ['16.x', '18.x', '20.x']
    
    steps:
    - name: 📋 Checkout code
      uses: actions/checkout@v4
    
    - name: 🔧 Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: 📦 Install dependencies
      run: npm ci
    
    - name: 🧪 Run unit tests
      run: npm run test:unit -- --coverage
    
    - name: 🔗 Run integration tests
      run: npm run test:integration
    
    - name: 📊 Upload coverage
      if: matrix.node-version == '18.x'
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  # 🔍 Security Checks
  security:
    name: 🔒 Security
    runs-on: ubuntu-latest
    needs: quality
    
    steps:
    - name: 📋 Checkout code
      uses: actions/checkout@v4
    
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: 📦 Install dependencies
      run: npm ci
    
    - name: 🔍 Security audit
      run: npm audit --audit-level=moderate
    
    - name: 🕵️ License check
      run: npm run license-check
    
    - name: 🐛 CodeQL Analysis
      uses: github/codeql-action/init@v2
      with:
        languages: javascript
    
    - name: 🕵️ Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  # 🏗️ Build & Deploy
  build:
    name: 🏗️ Build
    runs-on: ubuntu-latest
    needs: [quality, test, security]
    
    steps:
    - name: 📋 Checkout code
      uses: actions/checkout@v4
    
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: 📦 Install dependencies
      run: npm ci
    
    - name: 🏗️ Build project
      run: |
        npm run build
        npm run build:docs
    
    - name: 📎 Generate build info
      run: |
        echo "Build Date: $(date)" > dist/build-info.txt
        echo "Commit: ${{ github.sha }}" >> dist/build-info.txt
        echo "Branch: ${{ github.ref_name }}" >> dist/build-info.txt
    
    - name: 📎 Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: |
          dist/
          docs/
        retention-days: 30
    
    - name: 📦 Build Docker image
      if: github.ref == 'refs/heads/main'
      run: |
        docker build -t ${{ github.repository }}:latest .
        docker build -t ${{ github.repository }}:${{ github.sha }} .

  # 🚀 Deploy to Staging
  deploy-staging:
    name: 🚀 Deploy Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.ejemplo.com
    
    steps:
    - name: 📋 Checkout code
      uses: actions/checkout@v4
    
    - name: 📥 Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files
        path: dist/
    
    - name: 🚀 Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Aquí irían los comandos de deploy reales
        # Por ejemplo: rsync, scp, deploy to cloud, etc.
    
    - name: 💬 Notify deployment
      if: always()
      run: |
        echo "Staging deployment completed for commit ${{ github.sha }}"

  # 🎆 Deploy to Production
  deploy-production:
    name: 🎆 Deploy Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://ejemplo.com
    
    steps:
    - name: 📋 Checkout code
      uses: actions/checkout@v4
    
    - name: 📥 Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files
        path: dist/
    
    - name: 🎆 Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Comandos de deploy a producción
    
    - name: 🏆 Create GitHub Release
      if: contains(github.event.head_commit.message, 'release:')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          ## 🎉 Nueva Release
          
          ### 🚀 Cambios
          ${{ github.event.head_commit.message }}
          
          ### 📊 Estadísticas
          - Commit: ${{ github.sha }}
          - Fecha: $(date)
          - Autor: ${{ github.actor }}
        draft: false
        prerelease: false

  # 🔄 Performance Tests
  performance:
    name: 📊 Performance
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'
    
    steps:
    - name: 📋 Checkout code
      uses: actions/checkout@v4
    
    - name: 📥 Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files
        path: dist/
    
    - name: 📊 Lighthouse CI
      uses: treosh/lighthouse-ci-action@v9
      with:
        configPath: './.lighthouserc.json'
        uploadArtifacts: true
        temporaryPublicStorage: true
    
    - name: 🚀 Bundle size check
      run: |
        npm install -g bundlesize
        bundlesize

  # 📊 Metrics & Monitoring
  metrics:
    name: 📊 Metrics
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📋 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: 📊 Generate metrics
      run: |
        echo "Generating project metrics..."
        
        # Contar líneas de código
        find src -name '*.js' -o -name '*.ts' -o -name '*.jsx' -o -name '*.tsx' | xargs wc -l
        
        # Contar archivos por tipo
        echo "Files by extension:"
        find src -type f | sed 's/.*\.//' | sort | uniq -c | sort -rn
        
        # Tamaño del repositorio
        echo "Repository size:"
        du -sh .
    
    - name: 💬 Update project stats
      run: |
        echo "Updating project statistics in README..."
        # Aquí se podrían actualizar badges dinámicamente